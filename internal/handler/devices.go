package handler

import (
	"context"
	"fmt"
	"log/slog"
	"strings"
	"time"

	"remnawave-tg-shop-bot/internal/config"

	remapi "github.com/Jolymmiles/remnawave-api-go/v2/api"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

// DevicesCallbackHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
func (h Handler) DevicesCallbackHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	callback := update.CallbackQuery
	langCode := callback.From.LanguageCode

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
	customer, err := h.customerRepository.FindByTelegramId(ctx, callback.From.ID)
	if err != nil {
		slog.Error("Error finding customer", err)
		return
	}

	if customer == nil || customer.SubscriptionLink == nil || customer.ExpireAt == nil || customer.ExpireAt.Before(time.Now()) {
		_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: callback.ID,
			Text:            h.translation.GetText(langCode, "no_subscription"),
			ShowAlert:       true,
		})
		if err != nil {
			slog.Error("Error answering callback query", err)
		}
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ª–∏–º–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	userUuid, deviceLimit, err := h.syncService.GetRemnawaveClient().GetUserInfo(ctx, callback.From.ID)
	if err != nil {
		slog.Error("Error getting user info", err)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "user not found"
		if strings.Contains(err.Error(), "user not found") {
			_, err = b.EditMessageText(ctx, &bot.EditMessageTextParams{
				ChatID:    callback.Message.Message.Chat.ID,
				MessageID: callback.Message.Message.ID,
				Text:      h.translation.GetText(langCode, "no_devices"),
				ReplyMarkup: models.InlineKeyboardMarkup{
					InlineKeyboard: [][]models.InlineKeyboardButton{
						{{Text: h.translation.GetText(langCode, "back_button"), CallbackData: CallbackStart}},
					},
				},
			})
		} else {
			_, err = b.EditMessageText(ctx, &bot.EditMessageTextParams{
				ChatID:    callback.Message.Message.Chat.ID,
				MessageID: callback.Message.Message.ID,
				Text:      h.translation.GetText(langCode, "devices_error"),
				ReplyMarkup: models.InlineKeyboardMarkup{
					InlineKeyboard: [][]models.InlineKeyboardButton{
						{{Text: h.translation.GetText(langCode, "back_button"), CallbackData: CallbackStart}},
					},
				},
			})
		}
		if err != nil {
			slog.Error("Error editing message", err)
		}
		return
	}

	// –ï—Å–ª–∏ –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Ä–∞–≤–µ–Ω 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	if deviceLimit == 0 {
		deviceLimit = config.GetHwidFallbackDeviceLimit()
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ UUID
	devices, err := h.syncService.GetRemnawaveClient().GetUserDevicesByUuid(ctx, userUuid)
	if err != nil {
		slog.Error("Error getting user devices", err)
		_, err = b.EditMessageText(ctx, &bot.EditMessageTextParams{
			ChatID:    callback.Message.Message.Chat.ID,
			MessageID: callback.Message.Message.ID,
			Text:      h.translation.GetText(langCode, "devices_error"),
			ReplyMarkup: models.InlineKeyboardMarkup{
				InlineKeyboard: [][]models.InlineKeyboardButton{
					{{Text: h.translation.GetText(langCode, "back_button"), CallbackData: CallbackStart}},
				},
			},
		})
		if err != nil {
			slog.Error("Error editing message", err)
		}
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
	messageText := h.translation.GetText(langCode, "devices_title")

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	messageText += fmt.Sprintf(h.translation.GetText(langCode, "device_limit"), len(devices), deviceLimit)

	var keyboard [][]models.InlineKeyboardButton

	if len(devices) == 0 {
		messageText += h.translation.GetText(langCode, "no_devices")
	} else {
		for i, device := range devices {
			// –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
			deviceName := h.getDeviceDisplayName(device, i+1)

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
			addedAt := device.CreatedAt.Format("02.01.2006 15:04")

			// –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ ID
			messageText += fmt.Sprintf(h.translation.GetText(langCode, "device_info_new"),
				fmt.Sprintf("‚Ññ%d", i+1),
				deviceName,
				addedAt)

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
			keyboard = append(keyboard, []models.InlineKeyboardButton{
				{
					Text:         fmt.Sprintf("üóëÔ∏è %s", deviceName),
					CallbackData: fmt.Sprintf("%s%s", CallbackDeleteDevice, device.Hwid),
				},
			})
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
		messageText += "\n" + h.translation.GetText(langCode, "device_delete_info")
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	keyboard = append(keyboard, []models.InlineKeyboardButton{
		{Text: h.translation.GetText(langCode, "back_button"), CallbackData: CallbackStart},
	})

	_, err = b.EditMessageText(ctx, &bot.EditMessageTextParams{
		ChatID:    callback.Message.Message.Chat.ID,
		MessageID: callback.Message.Message.ID,
		ParseMode: models.ParseModeHTML,
		Text:      messageText,
		ReplyMarkup: models.InlineKeyboardMarkup{
			InlineKeyboard: keyboard,
		},
	})
	if err != nil {
		slog.Error("Error editing message", err)
	}
}

// DeleteDeviceCallbackHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
func (h Handler) DeleteDeviceCallbackHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	callback := update.CallbackQuery
	langCode := callback.From.LanguageCode

	// –ò–∑–≤–ª–µ–∫–∞–µ–º HWID –∏–∑ callback data
	hwid := strings.TrimPrefix(callback.Data, CallbackDeleteDevice)
	if hwid == "" {
		slog.Error("Empty HWID in delete device callback")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
	customer, err := h.customerRepository.FindByTelegramId(ctx, callback.From.ID)
	if err != nil {
		slog.Error("Error finding customer", err)
		return
	}

	if customer == nil || customer.SubscriptionLink == nil || customer.ExpireAt == nil || customer.ExpireAt.Before(time.Now()) {
		_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: callback.ID,
			Text:            h.translation.GetText(langCode, "no_subscription"),
			ShowAlert:       true,
		})
		if err != nil {
			slog.Error("Error answering callback query", err)
		}
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userUuid, _, err := h.syncService.GetRemnawaveClient().GetUserInfo(ctx, callback.From.ID)
	if err != nil {
		slog.Error("Error getting user info", err)
		_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: callback.ID,
			Text:            h.translation.GetText(langCode, "device_delete_error"),
			ShowAlert:       true,
		})
		if err != nil {
			slog.Error("Error answering callback query", err)
		}
		return
	}

	// –£–¥–∞–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
	err = h.syncService.GetRemnawaveClient().DeleteUserDevice(ctx, userUuid, hwid)
	if err != nil {
		slog.Error("Error deleting device", err)
		_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: callback.ID,
			Text:            h.translation.GetText(langCode, "device_delete_error"),
			ShowAlert:       true,
		})
		if err != nil {
			slog.Error("Error answering callback query", err)
		}
		return
	}

	// –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º –∞–ª–µ—Ä—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
	_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: callback.ID,
		Text:            h.translation.GetText(langCode, "device_deleted"),
		ShowAlert:       false,
	})
	if err != nil {
		slog.Error("Error answering callback query", err)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	h.DevicesCallbackHandler(ctx, b, update)
}

// getDeviceDisplayName —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
func (h Handler) getDeviceDisplayName(device remapi.GetUserHwidDevicesResponseDtoResponseDevicesItem, deviceNumber int) string {
	// –°–æ–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
	var deviceInfo []string

	// –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
	if device.DeviceModel.Value != "" {
		deviceInfo = append(deviceInfo, device.DeviceModel.Value)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
	if device.Platform.Value != "" {
		deviceInfo = append(deviceInfo, device.Platform.Value)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –û–°, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
	if device.OsVersion.Value != "" {
		deviceInfo = append(deviceInfo, device.OsVersion.Value)
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
	if len(deviceInfo) > 0 {
		return strings.Join(deviceInfo, ", ")
	}

	// –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
	return fmt.Sprintf("Device %d", deviceNumber)
}
